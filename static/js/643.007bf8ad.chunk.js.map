{"version":3,"file":"static/js/643.007bf8ad.chunk.js","mappings":"kNAmBIA,EAAS,WAGX,IAH0B,IAAdC,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAC3CA,KAAQ,CACb,IAAIM,EAAqB,GAAdJ,EAAMF,GAEfC,GADEK,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOL,CACR,EClCD,EAAuB,0BAAvB,EAA0D,4B,uCC2E1D,EApEoB,SAAAQ,GAClB,OAAgCC,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACMC,EAAchB,IACdiB,EAAajB,IACbkB,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IACvBC,GAAWC,EAAAA,EAAAA,MAEXC,EAAc,SAAAC,GAClB,MAAwBA,EAAIC,OAApBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACd,OAAQD,GACN,IAAK,OACHb,EAAYc,GACZ,MACF,IAAK,SACHZ,EAAUY,GACV,MACF,QACEC,QAAQC,IAAI,4BAEjB,EAYD,OACE,kBACEC,UAAWC,EACXC,SAAU,SAAAR,GAAG,OAbjB,SAAsBA,EAAKE,EAAMZ,GAC/BU,EAAIS,iBACAf,EAASgB,KAAI,SAAAC,GAAG,OAAIA,EAAIT,IAAR,IAAcU,SAASV,GACzCW,MAAM,GAAD,OAAIX,EAAJ,8BAELL,GAASiB,EAAAA,EAAAA,IAAW,CAAEZ,KAAAA,EAAMZ,OAAAA,KAE9BU,EAAIe,cAAcC,OACnB,CAKoBC,CAAajB,EAAKZ,EAAUE,EAAhC,EAFf,WAIE,kBAAO4B,QAAS1B,EAAhB,mBACA,kBACE2B,QAASpB,EACTqB,KAAK,OACLlB,KAAK,OACLxB,GAAIc,EACJ6B,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,KAEV,kBAAOL,QAASzB,EAAhB,qBACA,kBACE0B,QAASpB,EACTrB,GAAIe,EACJ2B,KAAK,MACLlB,KAAK,SACLmB,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,KAEV,mBAAQjB,UAAWC,EAAYa,KAAK,SAApC,2BAKL,C","sources":["../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"button\":\"ContactForm_button__eSwX9\"};","import PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport css from './ContactForm.module.css';\nimport { selectContacts } from 'redux/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operations';\n\nconst ContactForm = props => {\n  const [userName, setUserName] = useState('');\n  const [number, setNumber] = useState('');\n  const nameImputId = nanoid();\n  const telInputId = nanoid();\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const hendleInput = evt => {\n    const { name, value } = evt.target;\n    switch (name) {\n      case 'name':\n        setUserName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        console.log('undefenit imput was used');\n    }\n  };\n\n  function handleSubmit(evt, name, number) {\n    evt.preventDefault();\n    if (contacts.map(obj => obj.name).includes(name)) {\n      alert(`${name} is alredy in ContactList`);\n    } else {\n      dispatch(addContact({ name, number }));\n    }\n    evt.currentTarget.reset();\n  }\n\n  return (\n    <form\n      className={css.form}\n      onSubmit={evt => handleSubmit(evt, userName, number)}\n    >\n      <label htmlFor={nameImputId}>Name</label>\n      <input\n        onInput={hendleInput}\n        type=\"text\"\n        name=\"name\"\n        id={nameImputId}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <label htmlFor={telInputId}>Number</label>\n      <input\n        onInput={hendleInput}\n        id={telInputId}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <button className={css.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nContactForm.propTypes = {\n  handleSubmit: PropTypes.func,\n};\n\nexport default ContactForm;\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","props","useState","userName","setUserName","number","setNumber","nameImputId","telInputId","contacts","useSelector","selectContacts","dispatch","useDispatch","hendleInput","evt","target","name","value","console","log","className","css","onSubmit","preventDefault","map","obj","includes","alert","addContact","currentTarget","reset","handleSubmit","htmlFor","onInput","type","pattern","title","required"],"sourceRoot":""}